@using AlisonSilvaPoeta.Interfaces.Login
@using AlisonSilvaPoeta.Interfaces.Repositories
@using AlisonSilvaPoeta.Interfaces.Services
@using AlisonSilvaPoeta.Models
@using AlisonSilvaPoeta.Repositories
@using AlisonSilvaPoeta.Services.Services
@using AlisonSilvaPoeta.ViewModels
@inject IUsuarioServices services;
@inject IClienteRepository clienteRepository;
@inject IJSRuntime jsRuntime;
@inject IHttpContextAccessor context
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1>Cadastro de Usuário</h1>

<div class="form-group">
    <input class="form-control" placeholder="Nome" @bind-value=vm.Nome />
</div>
<div class="form-group">
    <input class="form-control" type="email" placeholder="E-Mail" @bind-value=vm.EMail />
</div>
<div>
    <input class="form-control" type="password" placeholder="Senha" @bind-value=vm.Senha />
</div>
<div class="form-group">
    <input class="form-control" placeholder="Telefone" @bind-value=vm.Telefone />
</div>
<div class="form-group">
    <input class="form-control" placeholder="RG" @bind-value=vm.RG />
</div>
<div class="form-group">
    <input class="form-control" placeholder="CPF" @bind-value=vm.CPF />
</div>
<div class="form-group">
    <button class="btn btn-success" @onclick="CadastrarUsuario">Cadastrar Usuário</button>
</div>

@code {
    UsuarioViewModel vm = new UsuarioViewModel();

    /*protected override async Task OnInitializedAsync()
    {
        List<UsuarioViewModel> lista = await services.GetAll();

        if(lista == null)
        {
            UsuarioViewModel vm = new UsuarioViewModel(0, "Gustavo da Silva Oliveira", "gsoey2019123@gmail.com",
                "gustavo", "+55 (11) 98174-6450", "Administrador", "41.771.989-9", "226.132.280-16");

            await services.Add(vm);
        }
    }*/

    public async Task CadastrarUsuario()
    {
        vm.Permisao = "Cliente";
        await services.Add(vm);

        List<UsuarioViewModel> lista = await services.GetAll();

        Cliente cliente = new Cliente(lista.Last().Id);
        await clienteRepository.Add(cliente);

        await jsRuntime.InvokeVoidAsync("alert", "Cadastro Feito com Sucesso!");

        //await loginServices.Login(context.HttpContext, vm);

        Navigation.NavigateTo("/");

        StateHasChanged();
    }
}
